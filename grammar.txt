
start
= _ additive:additive _ { return additive; }

_ "whitespace" = [ \t\r\n]*

additive
= left:multiplicative tail:(_ ("+" / "-") _ multiplicative)*
  {
      var sum = left;

      for (var i = 0; i < tail.length; i++)
      {
          var op = tail[i][1] === "+" ? "add" : "sub";
          var right = tail[i][3];
          sum = { type: "func", name: op, params: [ sum, right ]};
      }

      return sum;
  }

multiplicative
= left:pow tail:(_ ("*" / "/") _ pow)*
  {
      var product = left;

      for (var i = 0; i < tail.length; i++)
      {
          var op = tail[i][1] === "*" ? "mult" : "div";
          var right = tail[i][3];
          product = { type: "func", name: op, params: [ product, right ]};
      }

      return product;
  }

pow
= base:primary _ "^" _ exponent:pow
  { return { type: "func", name: "pow", params: [ base, exponent ] }; }
/ primary

primary
= decimal
/ int
/ symbol
/ "(" _ additive:additive _ ")" { return additive; }
/ "|" _ additive:additive _ "|" { return { type:"func", name:"mag", params: [ additive ] }; }
/ funcapp;

symbol "symbol"
= symbol:("e" / "i" / "pi" / "z" / [A-Z]) { return { type: "symbol", name: symbol }; }

decimal "decimal"
= int:int "." uint:uint { return { type: "number", intPart: int.intPart, fracPart: uint.intPart}; }

int "int"
= sign:"-"? uint:uint { if (sign === "-") uint.intPart *= -1; return uint; }

uint "uint"
= digits:[0-9]+ { return { type: "number", intPart: parseInt(digits.join("")), fracPart: 0}; }

funcapp "funcapp"
= funcName:("arg" / "sin" / "cos" / "tan" / "log" / "gamma") _ "(" _ additive:additive _ ")"
{ return { type: "func", name: funcName, params: [ additive ] } }
