start
= additive

additive
= left:multiplicative op:("+" / "-") right:additive
  { return { type: "func", name: op === "+" ? "add" : "sub" , params: [ left, right ] }; }
/ multiplicative

multiplicative
= left:pow op:("*" / "/") right:multiplicative 
  { return { type: "func", name: op === "*" ? "mult" : "div" , params: [ left, right ] }; }
/ pow

pow
= base:primary "^" exponent:pow
  { return { type: "func", name: "pow", params: [ base, exponent ] }; }
/ primary

primary
= decimal
/ int
/ symbol
/ "(" additive:additive ")" { return additive; }
/ "|" additive:additive "|" { return { type:"func", name:"mag", params: [ additive ] }; }
/ funcapp;

symbol
= symbol:("e" / "i" / "pi" / "z" / [A-Z]) { return { type: "symbol", name: symbol }; }

decimal
= int:int "." uint:uint { return { type: "number", intPart: int.intPart, fracPart: uint.intPart}; }

int
= sign:"-"? uint:uint { if (sign === "-") uint.intPart *= -1; return uint; }

uint "uint"
= digits:[0-9]+ { return { type: "number", intPart: parseInt(digits.join("")), fracPart: 0}; }

funcapp "funcapp"
= funcName:("arg" / "sin" / "exp") "(" additive:additive ")"
{ return { type: "func", name: funcName, params: [ additive ] } }
